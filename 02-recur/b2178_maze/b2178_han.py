'''
미로 탐색

문제
N×M크기의 배열로 표현되는 미로가 있다.
1	0	1	1	1	1
1	0	1	0	1	0
1	0	1	0	1	1
1	1	1	0	1	1
미로에서 1은 이동할 수 있는 칸을 나타내고, 0은 이동할 수 없는 칸을 나타낸다. 이러한 미로가 주어졌을 때, (1, 1)에서 출발하여 (N, M)의 위치로 이동할 때 지나야 하는 최소의 칸 수를 구하는 프로그램을 작성하시오. 한 칸에서 다른 칸으로 이동할 때, 서로 인접한 칸으로만 이동할 수 있다.
위의 예에서는 15칸을 지나야 (N, M)의 위치로 이동할 수 있다. 칸을 셀 때에는 시작 위치와 도착 위치도 포함한다.

입력
첫째 줄에 두 정수 N, M(2 ≤ N, M ≤ 100)이 주어진다. 다음 N개의 줄에는 M개의 정수로 미로가 주어진다. 각각의 수들은 붙어서 입력으로 주어진다.

출력
첫째 줄에 지나야 하는 최소의 칸 수를 출력한다. 항상 도착위치로 이동할 수 있는 경우만 입력으로 주어진다.
'''
# 입력
'''
4 6
101111
101010
101011
111011

4 6
110110
110110
111111
111101

2 25
1011101110111011101110111
1110111011101110111011101
'''
# 출력
'''
15
9
38
'''
# 📌 다익스트라 vs. DFS+메모이제이션
'''
- 다익스트라 알고리즘은 우선순위 큐(최소 힙)를 사용해서 항상 현재까지 최소 비용인 정점을 먼저 선택하여 확정합니다.
    → 그래서 각 정점을 "최적의 경로"로 처리하는 순서가 보장됩니다.

- 반면, DFS + 메모이제이션 방식은 재귀를 통해 깊이 우선으로 탐색하다가, 이미 기록된 최소 비용보다 더 큰 경로는 가지치기(pruning)합니다.
    → 하지만 DFS는 탐색 순서를 보장하지 않기 때문에, 모든 경로를 다 탐색한 후에야 최종 최소 비용을 찾습니다.
'''

# 파이썬 재귀 호출 최대깊이 설정
# 일반적으로 재귀 깊이 1000으로 제한됨!
import sys
sys.setrecursionlimit(10**6)
# 입력 속도를 줄여 실행시간 단축
def input():
    return sys.stdin.readline().rstrip()

# DFS + 메모이제이션
def dfs(r, c, total):
    global min_path
    # 만약 현재까지 경로 길이가 이미 전역 최소보다 크면 더 이상 탐색하지 않음
    if total >= min_path:
        return
    # 만약 이 칸에 도달한 최소 경로가 이미 존재하고, 그 값이 현재 total보다 작거나 같다면 중단
    if total >= memo[r][c]:
        return
    # 현재 칸까지의 최소 경로 값을 갱신
    memo[r][c] = total

    # 도착지 도달 시 전역 최소 경로 길이 갱신
    if r == N-1 and c == M-1:
        min_path = total
        return

    # 4방향으로 탐색 (오른쪽, 아래, 왼쪽, 위)
    for dr, dc in ((0,1), (1,0), (0,-1), (-1,0)):
        nr = r + dr
        nc = c + dc
        if 0 <= nr < N and 0 <= nc < M and arr[nr][nc] == 1 and not visited[nr][nc]:
            visited[nr][nc] = 1
            dfs(nr, nc, total + 1)
            visited[nr][nc] = 0


N, M = map(int, input().split())
arr = [list(map(int, input().strip())) for _ in range(N)]

visited = [[0]*M for _ in range(N)]
visited[0][0] = True

# memo[r][c]는 (r, c)에 도달하는 최소 경로 길이를 저장 (초기에는 매우 큰 값으로)
INF = 10**9
memo = [[INF]*M for _ in range(N)]

min_path = INF
dfs(0, 0, 1)
print(min_path)